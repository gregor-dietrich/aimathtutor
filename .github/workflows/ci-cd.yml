# GitHub Actions workflow for CI/CD
# - test
# - security (SAST, secret detection, dependency scanning)
# - build
# - publish

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run tests
        run: ./mvnw test

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: SAST (CodeQL)
        uses: github/codeql-action/init@v4
        with:
          languages: java
      - name: Build with Maven (for CodeQL)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Compile project
        run: ./mvnw clean install package -DskipTests
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
      # - name: Secret Scanning
      #   uses: gitleaks/gitleaks-action@v2
      # - name: Run OWASP Dependency-Check
      #   run: ./mvnw org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
      # - name: Upload Dependency-Check results
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: dependency-check-report
      #     path: target/dependency-check-report.html

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-
      - name: Build with Maven
        run: ./mvnw clean install package -DskipTests -Pproduction
        - name: Run SpotBugs
          run: ./mvnw spotbugs:check
        - name: Run Checkstyle
          run: ./mvnw checkstyle:check

  # publish:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Publish Artifacts
  #       run: echo "Add publish/deploy steps here (e.g., Docker, GitHub Packages, etc.)"
